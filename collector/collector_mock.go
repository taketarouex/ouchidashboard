// Code generated by MockGen. DO NOT EDIT.
// Source: collector.go

// Package collector is a generated GoMock package.
package collector

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockICollector is a mock of ICollector interface
type MockICollector struct {
	ctrl     *gomock.Controller
	recorder *MockICollectorMockRecorder
}

// MockICollectorMockRecorder is the mock recorder for MockICollector
type MockICollectorMockRecorder struct {
	mock *MockICollector
}

// NewMockICollector creates a new mock instance
func NewMockICollector(ctrl *gomock.Controller) *MockICollector {
	mock := &MockICollector{ctrl: ctrl}
	mock.recorder = &MockICollectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockICollector) EXPECT() *MockICollectorMockRecorder {
	return m.recorder
}

// Collect mocks base method
func (m *MockICollector) Collect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Collect indicates an expected call of Collect
func (mr *MockICollectorMockRecorder) Collect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collect", reflect.TypeOf((*MockICollector)(nil).Collect))
}

// MockIRepository is a mock of IRepository interface
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// sourceID mocks base method
func (m *MockIRepository) sourceID() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "sourceID")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// sourceID indicates an expected call of sourceID
func (mr *MockIRepositoryMockRecorder) sourceID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "sourceID", reflect.TypeOf((*MockIRepository)(nil).sourceID))
}

// add mocks base method
func (m *MockIRepository) add(arg0 []collectLog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "add", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// add indicates an expected call of add
func (mr *MockIRepositoryMockRecorder) add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "add", reflect.TypeOf((*MockIRepository)(nil).add), arg0)
}

// MocknoRoom is a mock of noRoom interface
type MocknoRoom struct {
	ctrl     *gomock.Controller
	recorder *MocknoRoomMockRecorder
}

// MocknoRoomMockRecorder is the mock recorder for MocknoRoom
type MocknoRoomMockRecorder struct {
	mock *MocknoRoom
}

// NewMocknoRoom creates a new mock instance
func NewMocknoRoom(ctrl *gomock.Controller) *MocknoRoom {
	mock := &MocknoRoom{ctrl: ctrl}
	mock.recorder = &MocknoRoomMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MocknoRoom) EXPECT() *MocknoRoomMockRecorder {
	return m.recorder
}

// noRoom mocks base method
func (m *MocknoRoom) noRoom() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "noRoom")
	ret0, _ := ret[0].(bool)
	return ret0
}

// noRoom indicates an expected call of noRoom
func (mr *MocknoRoomMockRecorder) noRoom() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "noRoom", reflect.TypeOf((*MocknoRoom)(nil).noRoom))
}

// MocktimeInterface is a mock of timeInterface interface
type MocktimeInterface struct {
	ctrl     *gomock.Controller
	recorder *MocktimeInterfaceMockRecorder
}

// MocktimeInterfaceMockRecorder is the mock recorder for MocktimeInterface
type MocktimeInterfaceMockRecorder struct {
	mock *MocktimeInterface
}

// NewMocktimeInterface creates a new mock instance
func NewMocktimeInterface(ctrl *gomock.Controller) *MocktimeInterface {
	mock := &MocktimeInterface{ctrl: ctrl}
	mock.recorder = &MocktimeInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MocktimeInterface) EXPECT() *MocktimeInterfaceMockRecorder {
	return m.recorder
}

// now mocks base method
func (m *MocktimeInterface) now() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "now")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// now indicates an expected call of now
func (mr *MocktimeInterfaceMockRecorder) now() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "now", reflect.TypeOf((*MocktimeInterface)(nil).now))
}

// MockIFetcher is a mock of IFetcher interface
type MockIFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockIFetcherMockRecorder
}

// MockIFetcherMockRecorder is the mock recorder for MockIFetcher
type MockIFetcherMockRecorder struct {
	mock *MockIFetcher
}

// NewMockIFetcher creates a new mock instance
func NewMockIFetcher(ctrl *gomock.Controller) *MockIFetcher {
	mock := &MockIFetcher{ctrl: ctrl}
	mock.recorder = &MockIFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIFetcher) EXPECT() *MockIFetcherMockRecorder {
	return m.recorder
}

// fetch mocks base method
func (m *MockIFetcher) fetch(deviceID string) ([]collectLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "fetch", deviceID)
	ret0, _ := ret[0].([]collectLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// fetch indicates an expected call of fetch
func (mr *MockIFetcherMockRecorder) fetch(deviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "fetch", reflect.TypeOf((*MockIFetcher)(nil).fetch), deviceID)
}

// MocknoDevice is a mock of noDevice interface
type MocknoDevice struct {
	ctrl     *gomock.Controller
	recorder *MocknoDeviceMockRecorder
}

// MocknoDeviceMockRecorder is the mock recorder for MocknoDevice
type MocknoDeviceMockRecorder struct {
	mock *MocknoDevice
}

// NewMocknoDevice creates a new mock instance
func NewMocknoDevice(ctrl *gomock.Controller) *MocknoDevice {
	mock := &MocknoDevice{ctrl: ctrl}
	mock.recorder = &MocknoDeviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MocknoDevice) EXPECT() *MocknoDeviceMockRecorder {
	return m.recorder
}

// noDevice mocks base method
func (m *MocknoDevice) noDevice() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "noDevice")
	ret0, _ := ret[0].(bool)
	return ret0
}

// noDevice indicates an expected call of noDevice
func (mr *MocknoDeviceMockRecorder) noDevice() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "noDevice", reflect.TypeOf((*MocknoDevice)(nil).noDevice))
}
