// Code generated by MockGen. DO NOT EDIT.
// Source: ouchi.go

// Package ouchi is a generated GoMock package.
package ouchi

import (
	gomock "github.com/golang/mock/gomock"
	enum "github.com/tktkc72/ouchi/enum"
	reflect "reflect"
	time "time"
)

// MockIOuchi is a mock of IOuchi interface
type MockIOuchi struct {
	ctrl     *gomock.Controller
	recorder *MockIOuchiMockRecorder
}

// MockIOuchiMockRecorder is the mock recorder for MockIOuchi
type MockIOuchiMockRecorder struct {
	mock *MockIOuchi
}

// NewMockIOuchi creates a new mock instance
func NewMockIOuchi(ctrl *gomock.Controller) *MockIOuchi {
	mock := &MockIOuchi{ctrl: ctrl}
	mock.recorder = &MockIOuchiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIOuchi) EXPECT() *MockIOuchiMockRecorder {
	return m.recorder
}

// GetTemperature mocks base method
func (m *MockIOuchi) GetTemperature(roomName string, start, end time.Time, opts ...getOption) ([]Log, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{roomName, start, end}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTemperature", varargs...)
	ret0, _ := ret[0].([]Log)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemperature indicates an expected call of GetTemperature
func (mr *MockIOuchiMockRecorder) GetTemperature(roomName, start, end interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{roomName, start, end}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemperature", reflect.TypeOf((*MockIOuchi)(nil).GetTemperature), varargs...)
}

// MockIRepository is a mock of IRepository interface
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// fetch mocks base method
func (m *MockIRepository) fetch(roomName string, start, end time.Time, limit int, order enum.Order) ([]Log, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "fetch", roomName, start, end, limit, order)
	ret0, _ := ret[0].([]Log)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// fetch indicates an expected call of fetch
func (mr *MockIRepositoryMockRecorder) fetch(roomName, start, end, limit, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "fetch", reflect.TypeOf((*MockIRepository)(nil).fetch), roomName, start, end, limit, order)
}
